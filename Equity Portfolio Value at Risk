This code calculates the Value at Risk (VaR) for a portfolio of stocks using historical data fetched from Yahoo Finance. VaR is a widely used risk management tool that estimates the maximum expected loss over a specific time period at a given confidence level. In this case, the confidence level is set at 95%, meaning that there is a 95% chance the portfolio's loss will not exceed the calculated VaR.
What the Code Does

    Imports Required Libraries:
        yfinance: Used to fetch historical price data for the selected stocks.
        numpy: For numerical operations, such as sorting and calculating portfolio returns.
        pandas: To handle dataframes for organizing and processing stock data.
        matplotlib: For visualizing portfolio returns through a histogram, with VaR displayed on the plot.

    Fetches Historical Stock Data:
        The code specifies a portfolio of stocks (AAPL, MSFT, GOOGL, AMZN, TSLA), but this list can be customized.
        It fetches daily adjusted closing prices for each stock from January 1, 2022, to December 31, 2022 using the yfinance API.
        The daily percentage change in stock prices (returns) is calculated using the pct_change() function and stored in a pandas DataFrame. The data is then cleaned by dropping any missing values.

    Portfolio Returns Calculation:
        The code computes the daily portfolio returns by summing the individual stock returns for each day, assuming an equal allocation across all stocks in the portfolio. This approach gives a simplified portfolio return but can be adjusted based on actual portfolio weights.
        The returns are sorted in ascending order, preparing the data for VaR calculation.

    VaR Calculation:
        VaR is calculated by determining the confidence level (e.g., 95%) and finding the corresponding point in the sorted returns.
        The formula identifies the index in the sorted returns that corresponds to the 5th percentile, as 95% confidence implies that we are concerned with the worst 5% of returns.
        The calculated VaR represents the maximum loss the portfolio is expected to experience with 95% confidence over the given time period.

    Visualizing the Results:
        A histogram is generated to visualize the distribution of portfolio returns. The VaR threshold is shown as a vertical red dashed line to highlight the cut-off point for the worst expected losses at the given confidence level.
        The VaR value is also displayed as text on the plot, giving a clear visual representation of risk.

    Output:
        The script prints the VaR as a percentage, making it easy to interpret for risk assessment purposes. For instance, if the VaR is -3%, this means that the portfolio has a 95% chance of not losing more than 3% of its value on any given day during the specified period.

Why This Code is Important

    Risk Management: VaR is an essential risk metric for portfolio management. It allows investors and financial institutions to quantify potential losses and understand the risk profile of their portfolio. By calculating VaR, portfolio managers can set risk limits, assess capital reserves, and make informed decisions on asset allocation.

    Confidence-Based Risk Assessment: The code calculates VaR at a 95% confidence level, which is a standard in the financial industry. This means that there is only a 5% chance that the portfolio will experience losses greater than the VaR threshold on any given day. Investors and risk managers use this information to make decisions about hedging, capital allocation, and risk exposure.

    Historical Data: The code uses a historical VaR approach, which assumes that past market returns can provide insights into future risks. This is a straightforward and widely used method in finance, especially when the user lacks complex models or when volatility remains fairly constant.

    Portfolio-Level View: Rather than assessing individual stock risk, this code evaluates the combined risk of a portfolio, which reflects a more realistic scenario for most investors. Diversification typically reduces overall risk, and VaR at the portfolio level provides a more accurate picture of potential losses.

Limitations

    Assumptions: Historical VaR assumes that past performance will predict future risks, which may not hold true in highly volatile or abnormal market conditions.
    Ignores Tail Risk: While VaR captures losses at a certain confidence level, it does not measure the worst-case scenario (tail risk), which can be particularly important during market crises.
    Equal Weighting: The code assumes an equal-weighted portfolio. In reality, portfolios often have varying allocations, and modifying the code to account for individual stock weights could provide a more precise calculation.
____________________________________________________________________________________________________________________________________________
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Define the list of stock symbols for your portfolio
portfolio_symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']  # Replace with your own symbols

# Fetch historical daily returns for the portfolio from Yahoo Finance
portfolio_data = yf.download(portfolio_symbols, start='2022-01-01', end='2022-12-31', progress=False)['Adj Close'].pct_change().dropna()

# Calculate VaR at a specific confidence level (e.g., 95% confidence level)
confidence_level = 0.95

# Calculate VaR for the portfolio
portfolio_returns = portfolio_data.sum(axis=1)  # Calculate portfolio returns
sorted_returns = np.sort(portfolio_returns)

# Calculate the index corresponding to the confidence level
var_index = int(len(sorted_returns) * (1 - confidence_level))

# VaR calculation using historical data
var = sorted_returns[var_index]

# Convert VaR to a percentage
var_percentage = var * 100

# Create a histogram of portfolio returns
plt.figure(figsize=(8, 4))
plt.hist(portfolio_returns, bins=20, edgecolor='k', alpha=0.7)
plt.xlabel('Portfolio Returns')
plt.ylabel('Frequency')
plt.title('Portfolio Returns Distribution')
plt.grid(True)

# Show VaR value on the histogram plot
plt.axvline(var, color='r', linestyle='dashed', linewidth=1, label=f'{confidence_level*100}% VaR')
plt.legend()

# Display VaR value as text
plt.text(var + 0.005, 4, f'{confidence_level*100}% VaR = {var_percentage:.2f}%', color='r')

# Show the histogram plot
plt.show()

print(f"Value at Risk (VaR) at {confidence_level*100}% confidence level: {var_percentage:.2f}%")
